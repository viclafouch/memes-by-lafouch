
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model UserBookmark {
  id        String   @id @default(cuid())
  userId    String
  memeId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  meme Meme @relation(fields: [memeId], references: [id], onDelete: Cascade)

  @@unique([userId, memeId])
  @@index([userId])
  @@map("user_bookmark")
}

model Category {
  id        String         @id @default(cuid())
  title     String
  keywords  String[]       @default([])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  memes MemeCategory[]
}

model MemeCategory {
  memeId     String
  categoryId String
  createdAt  DateTime @default(now())

  meme     Meme     @relation(fields: [memeId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([memeId, categoryId])
}

model Video {
  id          Int    @id @default(autoincrement())
  meme        Meme?
  bunnyId     String @unique
  duration  Int
  bunnyStatus Int    @default(0)
}

model Meme {
  id           String         @id @default(cuid())
  title        String
  videoId      Int            @unique
  viewCount    Int            @default(0)
  tweetUrl     String?        @unique
  keywords     String[]       @default([])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  video        Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  embedding    Embedding[]
  bookmarkedBy UserBookmark[]
  categories MemeCategory[]
}

model User {
  id            String         @id
  name          String
  email         String         @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  bookmarks     UserBookmark[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Embedding {
  id     String  @id @default(cuid())
  meme   Meme    @relation(fields: [memeId], references: [id], onDelete: Cascade)
  memeId String
  type   String // Ex: 'keyword', 'description', etc.
  vector Float[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memeId, type])
}
