/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ReelsRouteImport } from './routes/reels'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as Public__rootRouteRouteImport } from './routes/_public__root/route'
import { Route as Public__rootIndexRouteImport } from './routes/_public__root/index'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminDownloaderRouteImport } from './routes/admin/downloader'
import { Route as Public__rootDefaultRouteRouteImport } from './routes/_public__root/_default/route'
import { Route as AdminLibraryIndexRouteImport } from './routes/admin/library/index'
import { Route as AdminCategoriesIndexRouteImport } from './routes/admin/categories/index'
import { Route as AdminLibraryMemeIdRouteImport } from './routes/admin/library/$memeId'
import { Route as Public__rootDefaultPricingRouteImport } from './routes/_public__root/_default/pricing'
import { Route as Public__rootDefaultFavoritesRouteImport } from './routes/_public__root/_default/favorites'
import { Route as Public__rootDefaultSettingsRouteRouteImport } from './routes/_public__root/_default/settings/route'
import { Route as Public__rootDefaultSettingsIndexRouteImport } from './routes/_public__root/_default/settings/index'
import { Route as Public__rootDefaultRandomIndexRouteImport } from './routes/_public__root/_default/random/index'
import { Route as Public__rootDefaultMemesIndexRouteImport } from './routes/_public__root/_default/memes/index'
import { Route as Public__rootDefaultPasswordResetRouteImport } from './routes/_public__root/_default/password.reset'
import { Route as Public__rootDefaultPasswordCreateNewRouteImport } from './routes/_public__root/_default/password.create-new'
import { Route as Public__rootDefaultMemesMemeIdRouteImport } from './routes/_public__root/_default/memes/$memeId'
import { Route as Public__rootDefaultCheckoutSuccessRouteImport } from './routes/_public__root/_default/checkout.success'
import { ServerRoute as ApiBunnyServerRouteImport } from './routes/api/bunny'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const ReelsRoute = ReelsRouteImport.update({
  id: '/reels',
  path: '/reels',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const Public__rootRouteRoute = Public__rootRouteRouteImport.update({
  id: '/_public__root',
  getParentRoute: () => rootRouteImport,
} as any)
const Public__rootIndexRoute = Public__rootIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => Public__rootRouteRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminDownloaderRoute = AdminDownloaderRouteImport.update({
  id: '/downloader',
  path: '/downloader',
  getParentRoute: () => AdminRouteRoute,
} as any)
const Public__rootDefaultRouteRoute =
  Public__rootDefaultRouteRouteImport.update({
    id: '/_default',
    getParentRoute: () => Public__rootRouteRoute,
  } as any)
const AdminLibraryIndexRoute = AdminLibraryIndexRouteImport.update({
  id: '/library/',
  path: '/library/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminCategoriesIndexRoute = AdminCategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminLibraryMemeIdRoute = AdminLibraryMemeIdRouteImport.update({
  id: '/library/$memeId',
  path: '/library/$memeId',
  getParentRoute: () => AdminRouteRoute,
} as any)
const Public__rootDefaultPricingRoute =
  Public__rootDefaultPricingRouteImport.update({
    id: '/pricing',
    path: '/pricing',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultFavoritesRoute =
  Public__rootDefaultFavoritesRouteImport.update({
    id: '/favorites',
    path: '/favorites',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultSettingsRouteRoute =
  Public__rootDefaultSettingsRouteRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultSettingsIndexRoute =
  Public__rootDefaultSettingsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => Public__rootDefaultSettingsRouteRoute,
  } as any)
const Public__rootDefaultRandomIndexRoute =
  Public__rootDefaultRandomIndexRouteImport.update({
    id: '/random/',
    path: '/random/',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultMemesIndexRoute =
  Public__rootDefaultMemesIndexRouteImport.update({
    id: '/memes/',
    path: '/memes/',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultPasswordResetRoute =
  Public__rootDefaultPasswordResetRouteImport.update({
    id: '/password/reset',
    path: '/password/reset',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultPasswordCreateNewRoute =
  Public__rootDefaultPasswordCreateNewRouteImport.update({
    id: '/password/create-new',
    path: '/password/create-new',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultMemesMemeIdRoute =
  Public__rootDefaultMemesMemeIdRouteImport.update({
    id: '/memes/$memeId',
    path: '/memes/$memeId',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultCheckoutSuccessRoute =
  Public__rootDefaultCheckoutSuccessRouteImport.update({
    id: '/checkout/success',
    path: '/checkout/success',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const ApiBunnyServerRoute = ApiBunnyServerRouteImport.update({
  id: '/api/bunny',
  path: '/api/bunny',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/reels': typeof ReelsRoute
  '/admin/downloader': typeof AdminDownloaderRoute
  '/admin/users': typeof AdminUsersRoute
  '/': typeof Public__rootIndexRoute
  '/settings': typeof Public__rootDefaultSettingsRouteRouteWithChildren
  '/favorites': typeof Public__rootDefaultFavoritesRoute
  '/pricing': typeof Public__rootDefaultPricingRoute
  '/admin/library/$memeId': typeof AdminLibraryMemeIdRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/library': typeof AdminLibraryIndexRoute
  '/checkout/success': typeof Public__rootDefaultCheckoutSuccessRoute
  '/memes/$memeId': typeof Public__rootDefaultMemesMemeIdRoute
  '/password/create-new': typeof Public__rootDefaultPasswordCreateNewRoute
  '/password/reset': typeof Public__rootDefaultPasswordResetRoute
  '/memes': typeof Public__rootDefaultMemesIndexRoute
  '/random': typeof Public__rootDefaultRandomIndexRoute
  '/settings/': typeof Public__rootDefaultSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminRouteRouteWithChildren
  '/reels': typeof ReelsRoute
  '/admin/downloader': typeof AdminDownloaderRoute
  '/admin/users': typeof AdminUsersRoute
  '/': typeof Public__rootIndexRoute
  '/favorites': typeof Public__rootDefaultFavoritesRoute
  '/pricing': typeof Public__rootDefaultPricingRoute
  '/admin/library/$memeId': typeof AdminLibraryMemeIdRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/library': typeof AdminLibraryIndexRoute
  '/checkout/success': typeof Public__rootDefaultCheckoutSuccessRoute
  '/memes/$memeId': typeof Public__rootDefaultMemesMemeIdRoute
  '/password/create-new': typeof Public__rootDefaultPasswordCreateNewRoute
  '/password/reset': typeof Public__rootDefaultPasswordResetRoute
  '/memes': typeof Public__rootDefaultMemesIndexRoute
  '/random': typeof Public__rootDefaultRandomIndexRoute
  '/settings': typeof Public__rootDefaultSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_public__root': typeof Public__rootRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/reels': typeof ReelsRoute
  '/_public__root/_default': typeof Public__rootDefaultRouteRouteWithChildren
  '/admin/downloader': typeof AdminDownloaderRoute
  '/admin/users': typeof AdminUsersRoute
  '/_public__root/': typeof Public__rootIndexRoute
  '/_public__root/_default/settings': typeof Public__rootDefaultSettingsRouteRouteWithChildren
  '/_public__root/_default/favorites': typeof Public__rootDefaultFavoritesRoute
  '/_public__root/_default/pricing': typeof Public__rootDefaultPricingRoute
  '/admin/library/$memeId': typeof AdminLibraryMemeIdRoute
  '/admin/categories/': typeof AdminCategoriesIndexRoute
  '/admin/library/': typeof AdminLibraryIndexRoute
  '/_public__root/_default/checkout/success': typeof Public__rootDefaultCheckoutSuccessRoute
  '/_public__root/_default/memes/$memeId': typeof Public__rootDefaultMemesMemeIdRoute
  '/_public__root/_default/password/create-new': typeof Public__rootDefaultPasswordCreateNewRoute
  '/_public__root/_default/password/reset': typeof Public__rootDefaultPasswordResetRoute
  '/_public__root/_default/memes/': typeof Public__rootDefaultMemesIndexRoute
  '/_public__root/_default/random/': typeof Public__rootDefaultRandomIndexRoute
  '/_public__root/_default/settings/': typeof Public__rootDefaultSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/reels'
    | '/admin/downloader'
    | '/admin/users'
    | '/'
    | '/settings'
    | '/favorites'
    | '/pricing'
    | '/admin/library/$memeId'
    | '/admin/categories'
    | '/admin/library'
    | '/checkout/success'
    | '/memes/$memeId'
    | '/password/create-new'
    | '/password/reset'
    | '/memes'
    | '/random'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/reels'
    | '/admin/downloader'
    | '/admin/users'
    | '/'
    | '/favorites'
    | '/pricing'
    | '/admin/library/$memeId'
    | '/admin/categories'
    | '/admin/library'
    | '/checkout/success'
    | '/memes/$memeId'
    | '/password/create-new'
    | '/password/reset'
    | '/memes'
    | '/random'
    | '/settings'
  id:
    | '__root__'
    | '/_public__root'
    | '/admin'
    | '/reels'
    | '/_public__root/_default'
    | '/admin/downloader'
    | '/admin/users'
    | '/_public__root/'
    | '/_public__root/_default/settings'
    | '/_public__root/_default/favorites'
    | '/_public__root/_default/pricing'
    | '/admin/library/$memeId'
    | '/admin/categories/'
    | '/admin/library/'
    | '/_public__root/_default/checkout/success'
    | '/_public__root/_default/memes/$memeId'
    | '/_public__root/_default/password/create-new'
    | '/_public__root/_default/password/reset'
    | '/_public__root/_default/memes/'
    | '/_public__root/_default/random/'
    | '/_public__root/_default/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  Public__rootRouteRoute: typeof Public__rootRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  ReelsRoute: typeof ReelsRoute
}
export interface FileServerRoutesByFullPath {
  '/api/bunny': typeof ApiBunnyServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/bunny': typeof ApiBunnyServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/bunny': typeof ApiBunnyServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/bunny' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/bunny' | '/api/auth/$'
  id: '__root__' | '/api/bunny' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiBunnyServerRoute: typeof ApiBunnyServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reels': {
      id: '/reels'
      path: '/reels'
      fullPath: '/reels'
      preLoaderRoute: typeof ReelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public__root': {
      id: '/_public__root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Public__rootRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public__root/': {
      id: '/_public__root/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof Public__rootIndexRouteImport
      parentRoute: typeof Public__rootRouteRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/downloader': {
      id: '/admin/downloader'
      path: '/downloader'
      fullPath: '/admin/downloader'
      preLoaderRoute: typeof AdminDownloaderRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_public__root/_default': {
      id: '/_public__root/_default'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Public__rootDefaultRouteRouteImport
      parentRoute: typeof Public__rootRouteRoute
    }
    '/admin/library/': {
      id: '/admin/library/'
      path: '/library'
      fullPath: '/admin/library'
      preLoaderRoute: typeof AdminLibraryIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/categories/': {
      id: '/admin/categories/'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/library/$memeId': {
      id: '/admin/library/$memeId'
      path: '/library/$memeId'
      fullPath: '/admin/library/$memeId'
      preLoaderRoute: typeof AdminLibraryMemeIdRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_public__root/_default/pricing': {
      id: '/_public__root/_default/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof Public__rootDefaultPricingRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/favorites': {
      id: '/_public__root/_default/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof Public__rootDefaultFavoritesRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/settings': {
      id: '/_public__root/_default/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof Public__rootDefaultSettingsRouteRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/settings/': {
      id: '/_public__root/_default/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof Public__rootDefaultSettingsIndexRouteImport
      parentRoute: typeof Public__rootDefaultSettingsRouteRoute
    }
    '/_public__root/_default/random/': {
      id: '/_public__root/_default/random/'
      path: '/random'
      fullPath: '/random'
      preLoaderRoute: typeof Public__rootDefaultRandomIndexRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/memes/': {
      id: '/_public__root/_default/memes/'
      path: '/memes'
      fullPath: '/memes'
      preLoaderRoute: typeof Public__rootDefaultMemesIndexRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/password/reset': {
      id: '/_public__root/_default/password/reset'
      path: '/password/reset'
      fullPath: '/password/reset'
      preLoaderRoute: typeof Public__rootDefaultPasswordResetRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/password/create-new': {
      id: '/_public__root/_default/password/create-new'
      path: '/password/create-new'
      fullPath: '/password/create-new'
      preLoaderRoute: typeof Public__rootDefaultPasswordCreateNewRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/memes/$memeId': {
      id: '/_public__root/_default/memes/$memeId'
      path: '/memes/$memeId'
      fullPath: '/memes/$memeId'
      preLoaderRoute: typeof Public__rootDefaultMemesMemeIdRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/checkout/success': {
      id: '/_public__root/_default/checkout/success'
      path: '/checkout/success'
      fullPath: '/checkout/success'
      preLoaderRoute: typeof Public__rootDefaultCheckoutSuccessRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/bunny': {
      id: '/api/bunny'
      path: '/api/bunny'
      fullPath: '/api/bunny'
      preLoaderRoute: typeof ApiBunnyServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface Public__rootDefaultSettingsRouteRouteChildren {
  Public__rootDefaultSettingsIndexRoute: typeof Public__rootDefaultSettingsIndexRoute
}

const Public__rootDefaultSettingsRouteRouteChildren: Public__rootDefaultSettingsRouteRouteChildren =
  {
    Public__rootDefaultSettingsIndexRoute:
      Public__rootDefaultSettingsIndexRoute,
  }

const Public__rootDefaultSettingsRouteRouteWithChildren =
  Public__rootDefaultSettingsRouteRoute._addFileChildren(
    Public__rootDefaultSettingsRouteRouteChildren,
  )

interface Public__rootDefaultRouteRouteChildren {
  Public__rootDefaultSettingsRouteRoute: typeof Public__rootDefaultSettingsRouteRouteWithChildren
  Public__rootDefaultFavoritesRoute: typeof Public__rootDefaultFavoritesRoute
  Public__rootDefaultPricingRoute: typeof Public__rootDefaultPricingRoute
  Public__rootDefaultCheckoutSuccessRoute: typeof Public__rootDefaultCheckoutSuccessRoute
  Public__rootDefaultMemesMemeIdRoute: typeof Public__rootDefaultMemesMemeIdRoute
  Public__rootDefaultPasswordCreateNewRoute: typeof Public__rootDefaultPasswordCreateNewRoute
  Public__rootDefaultPasswordResetRoute: typeof Public__rootDefaultPasswordResetRoute
  Public__rootDefaultMemesIndexRoute: typeof Public__rootDefaultMemesIndexRoute
  Public__rootDefaultRandomIndexRoute: typeof Public__rootDefaultRandomIndexRoute
}

const Public__rootDefaultRouteRouteChildren: Public__rootDefaultRouteRouteChildren =
  {
    Public__rootDefaultSettingsRouteRoute:
      Public__rootDefaultSettingsRouteRouteWithChildren,
    Public__rootDefaultFavoritesRoute: Public__rootDefaultFavoritesRoute,
    Public__rootDefaultPricingRoute: Public__rootDefaultPricingRoute,
    Public__rootDefaultCheckoutSuccessRoute:
      Public__rootDefaultCheckoutSuccessRoute,
    Public__rootDefaultMemesMemeIdRoute: Public__rootDefaultMemesMemeIdRoute,
    Public__rootDefaultPasswordCreateNewRoute:
      Public__rootDefaultPasswordCreateNewRoute,
    Public__rootDefaultPasswordResetRoute:
      Public__rootDefaultPasswordResetRoute,
    Public__rootDefaultMemesIndexRoute: Public__rootDefaultMemesIndexRoute,
    Public__rootDefaultRandomIndexRoute: Public__rootDefaultRandomIndexRoute,
  }

const Public__rootDefaultRouteRouteWithChildren =
  Public__rootDefaultRouteRoute._addFileChildren(
    Public__rootDefaultRouteRouteChildren,
  )

interface Public__rootRouteRouteChildren {
  Public__rootDefaultRouteRoute: typeof Public__rootDefaultRouteRouteWithChildren
  Public__rootIndexRoute: typeof Public__rootIndexRoute
}

const Public__rootRouteRouteChildren: Public__rootRouteRouteChildren = {
  Public__rootDefaultRouteRoute: Public__rootDefaultRouteRouteWithChildren,
  Public__rootIndexRoute: Public__rootIndexRoute,
}

const Public__rootRouteRouteWithChildren =
  Public__rootRouteRoute._addFileChildren(Public__rootRouteRouteChildren)

interface AdminRouteRouteChildren {
  AdminDownloaderRoute: typeof AdminDownloaderRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminLibraryMemeIdRoute: typeof AdminLibraryMemeIdRoute
  AdminCategoriesIndexRoute: typeof AdminCategoriesIndexRoute
  AdminLibraryIndexRoute: typeof AdminLibraryIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminDownloaderRoute: AdminDownloaderRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminLibraryMemeIdRoute: AdminLibraryMemeIdRoute,
  AdminCategoriesIndexRoute: AdminCategoriesIndexRoute,
  AdminLibraryIndexRoute: AdminLibraryIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  Public__rootRouteRoute: Public__rootRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  ReelsRoute: ReelsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiBunnyServerRoute: ApiBunnyServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
