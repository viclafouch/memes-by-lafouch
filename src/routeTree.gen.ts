/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as Public__rootRouteRouteImport } from './routes/_public__root/route'
import { Route as Public__rootIndexRouteImport } from './routes/_public__root/index'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as Public__rootSignupRouteImport } from './routes/_public__root/signup'
import { Route as Public__rootLoginRouteImport } from './routes/_public__root/login'
import { Route as Public__rootDefaultRouteRouteImport } from './routes/_public__root/_default/route'
import { Route as AdminLibraryIndexRouteImport } from './routes/admin/library/index'
import { Route as AdminCategoriesIndexRouteImport } from './routes/admin/categories/index'
import { Route as AdminLibraryMemeIdRouteImport } from './routes/admin/library/$memeId'
import { Route as Public__rootDefaultFavoritesRouteImport } from './routes/_public__root/_default/favorites'
import { Route as Public__rootDefaultDownloaderRouteImport } from './routes/_public__root/_default/downloader'
import { Route as Public__rootDefaultStudioIndexRouteImport } from './routes/_public__root/_default/studio/index'
import { Route as Public__rootDefaultRandomIndexRouteImport } from './routes/_public__root/_default/random/index'
import { Route as Public__rootDefaultMemesIndexRouteImport } from './routes/_public__root/_default/memes/index'
import { Route as Public__rootDefaultStudioMemeIdRouteImport } from './routes/_public__root/_default/studio/$memeId'
import { Route as Public__rootDefaultRandomMemeIdRouteImport } from './routes/_public__root/_default/random/$memeId'
import { Route as Public__rootDefaultPasswordResetRouteImport } from './routes/_public__root/_default/password.reset'
import { Route as Public__rootDefaultPasswordCreateNewRouteImport } from './routes/_public__root/_default/password.create-new'
import { Route as Public__rootDefaultMemesMemeIdRouteImport } from './routes/_public__root/_default/memes/$memeId'
import { ServerRoute as ApiBunnyServerRouteImport } from './routes/api/bunny'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const Public__rootRouteRoute = Public__rootRouteRouteImport.update({
  id: '/_public__root',
  getParentRoute: () => rootRouteImport,
} as any)
const Public__rootIndexRoute = Public__rootIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => Public__rootRouteRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)
const Public__rootSignupRoute = Public__rootSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => Public__rootRouteRoute,
} as any)
const Public__rootLoginRoute = Public__rootLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => Public__rootRouteRoute,
} as any)
const Public__rootDefaultRouteRoute =
  Public__rootDefaultRouteRouteImport.update({
    id: '/_default',
    getParentRoute: () => Public__rootRouteRoute,
  } as any)
const AdminLibraryIndexRoute = AdminLibraryIndexRouteImport.update({
  id: '/library/',
  path: '/library/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminCategoriesIndexRoute = AdminCategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminLibraryMemeIdRoute = AdminLibraryMemeIdRouteImport.update({
  id: '/library/$memeId',
  path: '/library/$memeId',
  getParentRoute: () => AdminRouteRoute,
} as any)
const Public__rootDefaultFavoritesRoute =
  Public__rootDefaultFavoritesRouteImport.update({
    id: '/favorites',
    path: '/favorites',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultDownloaderRoute =
  Public__rootDefaultDownloaderRouteImport.update({
    id: '/downloader',
    path: '/downloader',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultStudioIndexRoute =
  Public__rootDefaultStudioIndexRouteImport.update({
    id: '/studio/',
    path: '/studio/',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultRandomIndexRoute =
  Public__rootDefaultRandomIndexRouteImport.update({
    id: '/random/',
    path: '/random/',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultMemesIndexRoute =
  Public__rootDefaultMemesIndexRouteImport.update({
    id: '/memes/',
    path: '/memes/',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultStudioMemeIdRoute =
  Public__rootDefaultStudioMemeIdRouteImport.update({
    id: '/studio/$memeId',
    path: '/studio/$memeId',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultRandomMemeIdRoute =
  Public__rootDefaultRandomMemeIdRouteImport.update({
    id: '/random/$memeId',
    path: '/random/$memeId',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultPasswordResetRoute =
  Public__rootDefaultPasswordResetRouteImport.update({
    id: '/password/reset',
    path: '/password/reset',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultPasswordCreateNewRoute =
  Public__rootDefaultPasswordCreateNewRouteImport.update({
    id: '/password/create-new',
    path: '/password/create-new',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const Public__rootDefaultMemesMemeIdRoute =
  Public__rootDefaultMemesMemeIdRouteImport.update({
    id: '/memes/$memeId',
    path: '/memes/$memeId',
    getParentRoute: () => Public__rootDefaultRouteRoute,
  } as any)
const ApiBunnyServerRoute = ApiBunnyServerRouteImport.update({
  id: '/api/bunny',
  path: '/api/bunny',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof Public__rootLoginRoute
  '/signup': typeof Public__rootSignupRoute
  '/admin/users': typeof AdminUsersRoute
  '/': typeof Public__rootIndexRoute
  '/downloader': typeof Public__rootDefaultDownloaderRoute
  '/favorites': typeof Public__rootDefaultFavoritesRoute
  '/admin/library/$memeId': typeof AdminLibraryMemeIdRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/library': typeof AdminLibraryIndexRoute
  '/memes/$memeId': typeof Public__rootDefaultMemesMemeIdRoute
  '/password/create-new': typeof Public__rootDefaultPasswordCreateNewRoute
  '/password/reset': typeof Public__rootDefaultPasswordResetRoute
  '/random/$memeId': typeof Public__rootDefaultRandomMemeIdRoute
  '/studio/$memeId': typeof Public__rootDefaultStudioMemeIdRoute
  '/memes': typeof Public__rootDefaultMemesIndexRoute
  '/random': typeof Public__rootDefaultRandomIndexRoute
  '/studio': typeof Public__rootDefaultStudioIndexRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof Public__rootLoginRoute
  '/signup': typeof Public__rootSignupRoute
  '/admin/users': typeof AdminUsersRoute
  '/': typeof Public__rootIndexRoute
  '/downloader': typeof Public__rootDefaultDownloaderRoute
  '/favorites': typeof Public__rootDefaultFavoritesRoute
  '/admin/library/$memeId': typeof AdminLibraryMemeIdRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/library': typeof AdminLibraryIndexRoute
  '/memes/$memeId': typeof Public__rootDefaultMemesMemeIdRoute
  '/password/create-new': typeof Public__rootDefaultPasswordCreateNewRoute
  '/password/reset': typeof Public__rootDefaultPasswordResetRoute
  '/random/$memeId': typeof Public__rootDefaultRandomMemeIdRoute
  '/studio/$memeId': typeof Public__rootDefaultStudioMemeIdRoute
  '/memes': typeof Public__rootDefaultMemesIndexRoute
  '/random': typeof Public__rootDefaultRandomIndexRoute
  '/studio': typeof Public__rootDefaultStudioIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_public__root': typeof Public__rootRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/_public__root/_default': typeof Public__rootDefaultRouteRouteWithChildren
  '/_public__root/login': typeof Public__rootLoginRoute
  '/_public__root/signup': typeof Public__rootSignupRoute
  '/admin/users': typeof AdminUsersRoute
  '/_public__root/': typeof Public__rootIndexRoute
  '/_public__root/_default/downloader': typeof Public__rootDefaultDownloaderRoute
  '/_public__root/_default/favorites': typeof Public__rootDefaultFavoritesRoute
  '/admin/library/$memeId': typeof AdminLibraryMemeIdRoute
  '/admin/categories/': typeof AdminCategoriesIndexRoute
  '/admin/library/': typeof AdminLibraryIndexRoute
  '/_public__root/_default/memes/$memeId': typeof Public__rootDefaultMemesMemeIdRoute
  '/_public__root/_default/password/create-new': typeof Public__rootDefaultPasswordCreateNewRoute
  '/_public__root/_default/password/reset': typeof Public__rootDefaultPasswordResetRoute
  '/_public__root/_default/random/$memeId': typeof Public__rootDefaultRandomMemeIdRoute
  '/_public__root/_default/studio/$memeId': typeof Public__rootDefaultStudioMemeIdRoute
  '/_public__root/_default/memes/': typeof Public__rootDefaultMemesIndexRoute
  '/_public__root/_default/random/': typeof Public__rootDefaultRandomIndexRoute
  '/_public__root/_default/studio/': typeof Public__rootDefaultStudioIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/login'
    | '/signup'
    | '/admin/users'
    | '/'
    | '/downloader'
    | '/favorites'
    | '/admin/library/$memeId'
    | '/admin/categories'
    | '/admin/library'
    | '/memes/$memeId'
    | '/password/create-new'
    | '/password/reset'
    | '/random/$memeId'
    | '/studio/$memeId'
    | '/memes'
    | '/random'
    | '/studio'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/login'
    | '/signup'
    | '/admin/users'
    | '/'
    | '/downloader'
    | '/favorites'
    | '/admin/library/$memeId'
    | '/admin/categories'
    | '/admin/library'
    | '/memes/$memeId'
    | '/password/create-new'
    | '/password/reset'
    | '/random/$memeId'
    | '/studio/$memeId'
    | '/memes'
    | '/random'
    | '/studio'
  id:
    | '__root__'
    | '/_public__root'
    | '/admin'
    | '/_public__root/_default'
    | '/_public__root/login'
    | '/_public__root/signup'
    | '/admin/users'
    | '/_public__root/'
    | '/_public__root/_default/downloader'
    | '/_public__root/_default/favorites'
    | '/admin/library/$memeId'
    | '/admin/categories/'
    | '/admin/library/'
    | '/_public__root/_default/memes/$memeId'
    | '/_public__root/_default/password/create-new'
    | '/_public__root/_default/password/reset'
    | '/_public__root/_default/random/$memeId'
    | '/_public__root/_default/studio/$memeId'
    | '/_public__root/_default/memes/'
    | '/_public__root/_default/random/'
    | '/_public__root/_default/studio/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  Public__rootRouteRoute: typeof Public__rootRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/bunny': typeof ApiBunnyServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/bunny': typeof ApiBunnyServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/bunny': typeof ApiBunnyServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/bunny' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/bunny' | '/api/auth/$'
  id: '__root__' | '/api/bunny' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiBunnyServerRoute: typeof ApiBunnyServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public__root': {
      id: '/_public__root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Public__rootRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public__root/': {
      id: '/_public__root/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof Public__rootIndexRouteImport
      parentRoute: typeof Public__rootRouteRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_public__root/signup': {
      id: '/_public__root/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof Public__rootSignupRouteImport
      parentRoute: typeof Public__rootRouteRoute
    }
    '/_public__root/login': {
      id: '/_public__root/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof Public__rootLoginRouteImport
      parentRoute: typeof Public__rootRouteRoute
    }
    '/_public__root/_default': {
      id: '/_public__root/_default'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Public__rootDefaultRouteRouteImport
      parentRoute: typeof Public__rootRouteRoute
    }
    '/admin/library/': {
      id: '/admin/library/'
      path: '/library'
      fullPath: '/admin/library'
      preLoaderRoute: typeof AdminLibraryIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/categories/': {
      id: '/admin/categories/'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/library/$memeId': {
      id: '/admin/library/$memeId'
      path: '/library/$memeId'
      fullPath: '/admin/library/$memeId'
      preLoaderRoute: typeof AdminLibraryMemeIdRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_public__root/_default/favorites': {
      id: '/_public__root/_default/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof Public__rootDefaultFavoritesRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/downloader': {
      id: '/_public__root/_default/downloader'
      path: '/downloader'
      fullPath: '/downloader'
      preLoaderRoute: typeof Public__rootDefaultDownloaderRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/studio/': {
      id: '/_public__root/_default/studio/'
      path: '/studio'
      fullPath: '/studio'
      preLoaderRoute: typeof Public__rootDefaultStudioIndexRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/random/': {
      id: '/_public__root/_default/random/'
      path: '/random'
      fullPath: '/random'
      preLoaderRoute: typeof Public__rootDefaultRandomIndexRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/memes/': {
      id: '/_public__root/_default/memes/'
      path: '/memes'
      fullPath: '/memes'
      preLoaderRoute: typeof Public__rootDefaultMemesIndexRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/studio/$memeId': {
      id: '/_public__root/_default/studio/$memeId'
      path: '/studio/$memeId'
      fullPath: '/studio/$memeId'
      preLoaderRoute: typeof Public__rootDefaultStudioMemeIdRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/random/$memeId': {
      id: '/_public__root/_default/random/$memeId'
      path: '/random/$memeId'
      fullPath: '/random/$memeId'
      preLoaderRoute: typeof Public__rootDefaultRandomMemeIdRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/password/reset': {
      id: '/_public__root/_default/password/reset'
      path: '/password/reset'
      fullPath: '/password/reset'
      preLoaderRoute: typeof Public__rootDefaultPasswordResetRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/password/create-new': {
      id: '/_public__root/_default/password/create-new'
      path: '/password/create-new'
      fullPath: '/password/create-new'
      preLoaderRoute: typeof Public__rootDefaultPasswordCreateNewRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
    '/_public__root/_default/memes/$memeId': {
      id: '/_public__root/_default/memes/$memeId'
      path: '/memes/$memeId'
      fullPath: '/memes/$memeId'
      preLoaderRoute: typeof Public__rootDefaultMemesMemeIdRouteImport
      parentRoute: typeof Public__rootDefaultRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/bunny': {
      id: '/api/bunny'
      path: '/api/bunny'
      fullPath: '/api/bunny'
      preLoaderRoute: typeof ApiBunnyServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface Public__rootDefaultRouteRouteChildren {
  Public__rootDefaultDownloaderRoute: typeof Public__rootDefaultDownloaderRoute
  Public__rootDefaultFavoritesRoute: typeof Public__rootDefaultFavoritesRoute
  Public__rootDefaultMemesMemeIdRoute: typeof Public__rootDefaultMemesMemeIdRoute
  Public__rootDefaultPasswordCreateNewRoute: typeof Public__rootDefaultPasswordCreateNewRoute
  Public__rootDefaultPasswordResetRoute: typeof Public__rootDefaultPasswordResetRoute
  Public__rootDefaultRandomMemeIdRoute: typeof Public__rootDefaultRandomMemeIdRoute
  Public__rootDefaultStudioMemeIdRoute: typeof Public__rootDefaultStudioMemeIdRoute
  Public__rootDefaultMemesIndexRoute: typeof Public__rootDefaultMemesIndexRoute
  Public__rootDefaultRandomIndexRoute: typeof Public__rootDefaultRandomIndexRoute
  Public__rootDefaultStudioIndexRoute: typeof Public__rootDefaultStudioIndexRoute
}

const Public__rootDefaultRouteRouteChildren: Public__rootDefaultRouteRouteChildren =
  {
    Public__rootDefaultDownloaderRoute: Public__rootDefaultDownloaderRoute,
    Public__rootDefaultFavoritesRoute: Public__rootDefaultFavoritesRoute,
    Public__rootDefaultMemesMemeIdRoute: Public__rootDefaultMemesMemeIdRoute,
    Public__rootDefaultPasswordCreateNewRoute:
      Public__rootDefaultPasswordCreateNewRoute,
    Public__rootDefaultPasswordResetRoute:
      Public__rootDefaultPasswordResetRoute,
    Public__rootDefaultRandomMemeIdRoute: Public__rootDefaultRandomMemeIdRoute,
    Public__rootDefaultStudioMemeIdRoute: Public__rootDefaultStudioMemeIdRoute,
    Public__rootDefaultMemesIndexRoute: Public__rootDefaultMemesIndexRoute,
    Public__rootDefaultRandomIndexRoute: Public__rootDefaultRandomIndexRoute,
    Public__rootDefaultStudioIndexRoute: Public__rootDefaultStudioIndexRoute,
  }

const Public__rootDefaultRouteRouteWithChildren =
  Public__rootDefaultRouteRoute._addFileChildren(
    Public__rootDefaultRouteRouteChildren,
  )

interface Public__rootRouteRouteChildren {
  Public__rootDefaultRouteRoute: typeof Public__rootDefaultRouteRouteWithChildren
  Public__rootLoginRoute: typeof Public__rootLoginRoute
  Public__rootSignupRoute: typeof Public__rootSignupRoute
  Public__rootIndexRoute: typeof Public__rootIndexRoute
}

const Public__rootRouteRouteChildren: Public__rootRouteRouteChildren = {
  Public__rootDefaultRouteRoute: Public__rootDefaultRouteRouteWithChildren,
  Public__rootLoginRoute: Public__rootLoginRoute,
  Public__rootSignupRoute: Public__rootSignupRoute,
  Public__rootIndexRoute: Public__rootIndexRoute,
}

const Public__rootRouteRouteWithChildren =
  Public__rootRouteRoute._addFileChildren(Public__rootRouteRouteChildren)

interface AdminRouteRouteChildren {
  AdminUsersRoute: typeof AdminUsersRoute
  AdminLibraryMemeIdRoute: typeof AdminLibraryMemeIdRoute
  AdminCategoriesIndexRoute: typeof AdminCategoriesIndexRoute
  AdminLibraryIndexRoute: typeof AdminLibraryIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminUsersRoute: AdminUsersRoute,
  AdminLibraryMemeIdRoute: AdminLibraryMemeIdRoute,
  AdminCategoriesIndexRoute: AdminCategoriesIndexRoute,
  AdminLibraryIndexRoute: AdminLibraryIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  Public__rootRouteRoute: Public__rootRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiBunnyServerRoute: ApiBunnyServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
